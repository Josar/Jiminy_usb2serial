
Jiminy_usb2serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000011fe  00001292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080011c  0080011c  000012ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000646b  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b46  00000000  00000000  00007a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008e6f  00000000  00000000  000095c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b04  00000000  00000000  00012430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00015a9e  00000000  00000000  00012f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000046fe  00000000  00000000  000289d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d40  00000000  00000000  0002d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006979  00000000  00000000  0002de10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8e c0       	rjmp	.+284    	; 0x11e <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 00       	nop
      28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c4       	rjmp	.+2316   	; 0x93a <__vector_11>
      2e:	00 00       	nop
      30:	23 c5       	rjmp	.+2630   	; 0xa78 <__vector_12>
      32:	00 00       	nop
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
      4e:	00 00       	nop
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c7       	rjmp	.+4086   	; 0x1054 <__vector_23>
      5e:	00 00       	nop
      60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
      62:	00 00       	nop
      64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
      66:	00 00       	nop
      68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
	...

00000074 <ProductString>:
      74:	32 03 4a 00 69 00 6d 00 69 00 6e 00 79 00 20 00     2.J.i.m.i.n.y. .
      84:	55 00 53 00 42 00 2d 00 52 00 53 00 32 00 33 00     U.S.B.-.R.S.2.3.
      94:	32 00 20 00 41 00 64 00 61 00 70 00 74 00 65 00     2. .A.d.a.p.t.e.
      a4:	72 00 00 00                                         r...

000000a8 <ManufacturerString>:
      a8:	20 03 49 00 41 00 53 00 20 00 52 00 57 00 54 00      .I.A.S. .R.W.T.
      b8:	48 00 20 00 41 00 61 00 63 00 68 00 65 00 6e 00     H. .A.a.c.h.e.n.
	...

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ConfigurationDescriptor>:
      ce:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      de:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ee:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      fe:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000010c <DeviceDescriptor>:
     10c:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     11c:	dc 01                                               ..

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d2 e0       	ldi	r29, 0x02	; 2
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	ee ef       	ldi	r30, 0xFE	; 254
     132:	f1 e1       	ldi	r31, 0x11	; 17
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	ac 31       	cpi	r26, 0x1C	; 28
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	22 e0       	ldi	r18, 0x02	; 2
     142:	ac e1       	ldi	r26, 0x1C	; 28
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a0 34       	cpi	r26, 0x40	; 64
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	8f d6       	rcall	.+3358   	; 0xe70 <main>
     152:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     158:	29 2f       	mov	r18, r25
     15a:	33 27       	eor	r19, r19
     15c:	22 30       	cpi	r18, 0x02	; 2
     15e:	31 05       	cpc	r19, r1
     160:	59 f0       	breq	.+22     	; 0x178 <CALLBACK_USB_GetDescriptor+0x20>
     162:	23 30       	cpi	r18, 0x03	; 3
     164:	31 05       	cpc	r19, r1
     166:	69 f0       	breq	.+26     	; 0x182 <CALLBACK_USB_GetDescriptor+0x2a>
     168:	21 30       	cpi	r18, 0x01	; 1
     16a:	31 05       	cpc	r19, r1
     16c:	21 f5       	brne	.+72     	; 0x1b6 <CALLBACK_USB_GetDescriptor+0x5e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     16e:	82 e1       	ldi	r24, 0x12	; 18
     170:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     172:	2c e0       	ldi	r18, 0x0C	; 12
     174:	31 e0       	ldi	r19, 0x01	; 1
     176:	28 c0       	rjmp	.+80     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x70>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     178:	8e e3       	ldi	r24, 0x3E	; 62
     17a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     17c:	2e ec       	ldi	r18, 0xCE	; 206
     17e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     180:	23 c0       	rjmp	.+70     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     182:	99 27       	eor	r25, r25
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	91 05       	cpc	r25, r1
     188:	51 f0       	breq	.+20     	; 0x19e <CALLBACK_USB_GetDescriptor+0x46>
     18a:	18 f0       	brcs	.+6      	; 0x192 <CALLBACK_USB_GetDescriptor+0x3a>
     18c:	02 97       	sbiw	r24, 0x02	; 2
     18e:	69 f0       	breq	.+26     	; 0x1aa <CALLBACK_USB_GetDescriptor+0x52>
     190:	17 c0       	rjmp	.+46     	; 0x1c0 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     192:	ea ec       	ldi	r30, 0xCA	; 202
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	84 91       	lpm	r24, Z
     198:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     19a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     19c:	15 c0       	rjmp	.+42     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     19e:	e8 ea       	ldi	r30, 0xA8	; 168
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	84 91       	lpm	r24, Z
     1a4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1a6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1aa:	e4 e7       	ldi	r30, 0x74	; 116
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	84 91       	lpm	r24, Z
     1b0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1b2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <CALLBACK_USB_GetDescriptor+0x70>
	uint16_t    Size    = NO_DESCRIPTOR;
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1c8:	fa 01       	movw	r30, r20
     1ca:	31 83       	std	Z+1, r19	; 0x01
     1cc:	20 83       	st	Z, r18
	return Size;
}
     1ce:	08 95       	ret

000001d0 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	ec 01       	movw	r28, r24
     1d6:	fc 01       	movw	r30, r24
     1d8:	70 96       	adiw	r30, 0x10	; 16
     1da:	8b e0       	ldi	r24, 0x0B	; 11
     1dc:	df 01       	movw	r26, r30
     1de:	1d 92       	st	X+, r1
     1e0:	8a 95       	dec	r24
     1e2:	e9 f7       	brne	.-6      	; 0x1de <CDC_Device_ConfigureEndpoints+0xe>
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	8c 83       	std	Y+4, r24	; 0x04
     1e8:	89 87       	std	Y+9, r24	; 0x09
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	8e 87       	std	Y+14, r24	; 0x0e
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	ce 01       	movw	r24, r28
     1f2:	01 96       	adiw	r24, 0x01	; 1
     1f4:	af d2       	rcall	.+1374   	; 0x754 <Endpoint_ConfigureEndpointTable>
     1f6:	88 23       	and	r24, r24
     1f8:	51 f0       	breq	.+20     	; 0x20e <CDC_Device_ConfigureEndpoints+0x3e>
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	ce 01       	movw	r24, r28
     1fe:	06 96       	adiw	r24, 0x06	; 6
     200:	a9 d2       	rcall	.+1362   	; 0x754 <Endpoint_ConfigureEndpointTable>
     202:	88 23       	and	r24, r24
     204:	21 f0       	breq	.+8      	; 0x20e <CDC_Device_ConfigureEndpoints+0x3e>
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	ce 01       	movw	r24, r28
     20a:	0b 96       	adiw	r24, 0x0b	; 11
     20c:	a3 d2       	rcall	.+1350   	; 0x754 <Endpoint_ConfigureEndpointTable>
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <CDC_Device_SendByte>:
     214:	cf 93       	push	r28
     216:	fc 01       	movw	r30, r24
     218:	9e b3       	in	r25, 0x1e	; 30
     21a:	94 30       	cpi	r25, 0x04	; 4
     21c:	e9 f4       	brne	.+58     	; 0x258 <CDC_Device_SendByte+0x44>
     21e:	84 89       	ldd	r24, Z+20	; 0x14
     220:	95 89       	ldd	r25, Z+21	; 0x15
     222:	a6 89       	ldd	r26, Z+22	; 0x16
     224:	b7 89       	ldd	r27, Z+23	; 0x17
     226:	89 2b       	or	r24, r25
     228:	8a 2b       	or	r24, r26
     22a:	8b 2b       	or	r24, r27
     22c:	b9 f0       	breq	.+46     	; 0x25c <CDC_Device_SendByte+0x48>
     22e:	c6 2f       	mov	r28, r22
     230:	81 81       	ldd	r24, Z+1	; 0x01
     232:	8f 70       	andi	r24, 0x0F	; 15
     234:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     238:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     23c:	85 fd       	sbrc	r24, 5
     23e:	08 c0       	rjmp	.+16     	; 0x250 <CDC_Device_SendByte+0x3c>
     240:	e8 ee       	ldi	r30, 0xE8	; 232
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8e 77       	andi	r24, 0x7E	; 126
     248:	80 83       	st	Z, r24
     24a:	f5 d2       	rcall	.+1514   	; 0x836 <Endpoint_WaitUntilReady>
     24c:	81 11       	cpse	r24, r1
     24e:	07 c0       	rjmp	.+14     	; 0x25e <CDC_Device_SendByte+0x4a>
     250:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	03 c0       	rjmp	.+6      	; 0x25e <CDC_Device_SendByte+0x4a>
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	01 c0       	rjmp	.+2      	; 0x25e <CDC_Device_SendByte+0x4a>
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <CDC_Device_Flush>:
     262:	fc 01       	movw	r30, r24
     264:	9e b3       	in	r25, 0x1e	; 30
     266:	94 30       	cpi	r25, 0x04	; 4
     268:	09 f5       	brne	.+66     	; 0x2ac <CDC_Device_Flush+0x4a>
     26a:	84 89       	ldd	r24, Z+20	; 0x14
     26c:	95 89       	ldd	r25, Z+21	; 0x15
     26e:	a6 89       	ldd	r26, Z+22	; 0x16
     270:	b7 89       	ldd	r27, Z+23	; 0x17
     272:	89 2b       	or	r24, r25
     274:	8a 2b       	or	r24, r26
     276:	8b 2b       	or	r24, r27
     278:	d9 f0       	breq	.+54     	; 0x2b0 <CDC_Device_Flush+0x4e>
     27a:	81 81       	ldd	r24, Z+1	; 0x01
     27c:	8f 70       	andi	r24, 0x0F	; 15
     27e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     282:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     286:	88 23       	and	r24, r24
     288:	b1 f0       	breq	.+44     	; 0x2b6 <CDC_Device_Flush+0x54>
     28a:	e8 ee       	ldi	r30, 0xE8	; 232
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	90 81       	ld	r25, Z
     290:	80 81       	ld	r24, Z
     292:	8e 77       	andi	r24, 0x7E	; 126
     294:	80 83       	st	Z, r24
     296:	95 fd       	sbrc	r25, 5
     298:	0d c0       	rjmp	.+26     	; 0x2b4 <CDC_Device_Flush+0x52>
     29a:	cd d2       	rcall	.+1434   	; 0x836 <Endpoint_WaitUntilReady>
     29c:	81 11       	cpse	r24, r1
     29e:	0b c0       	rjmp	.+22     	; 0x2b6 <CDC_Device_Flush+0x54>
     2a0:	e8 ee       	ldi	r30, 0xE8	; 232
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	90 81       	ld	r25, Z
     2a6:	9e 77       	andi	r25, 0x7E	; 126
     2a8:	90 83       	st	Z, r25
     2aa:	08 95       	ret
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	08 95       	ret
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	08 95       	ret
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	08 95       	ret

000002b8 <CDC_Device_USBTask>:
     2b8:	fc 01       	movw	r30, r24
     2ba:	9e b3       	in	r25, 0x1e	; 30
     2bc:	94 30       	cpi	r25, 0x04	; 4
     2be:	91 f4       	brne	.+36     	; 0x2e4 <CDC_Device_USBTask+0x2c>
     2c0:	84 89       	ldd	r24, Z+20	; 0x14
     2c2:	95 89       	ldd	r25, Z+21	; 0x15
     2c4:	a6 89       	ldd	r26, Z+22	; 0x16
     2c6:	b7 89       	ldd	r27, Z+23	; 0x17
     2c8:	89 2b       	or	r24, r25
     2ca:	8a 2b       	or	r24, r26
     2cc:	8b 2b       	or	r24, r27
     2ce:	51 f0       	breq	.+20     	; 0x2e4 <CDC_Device_USBTask+0x2c>
     2d0:	81 81       	ldd	r24, Z+1	; 0x01
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     2d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     2dc:	80 ff       	sbrs	r24, 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <CDC_Device_USBTask+0x2c>
     2e0:	cf 01       	movw	r24, r30
     2e2:	bf cf       	rjmp	.-130    	; 0x262 <CDC_Device_Flush>
     2e4:	08 95       	ret

000002e6 <CDC_Device_ReceiveByte>:
     2e6:	2e b3       	in	r18, 0x1e	; 30
     2e8:	24 30       	cpi	r18, 0x04	; 4
     2ea:	39 f5       	brne	.+78     	; 0x33a <__stack+0x3b>
     2ec:	fc 01       	movw	r30, r24
     2ee:	44 89       	ldd	r20, Z+20	; 0x14
     2f0:	55 89       	ldd	r21, Z+21	; 0x15
     2f2:	66 89       	ldd	r22, Z+22	; 0x16
     2f4:	77 89       	ldd	r23, Z+23	; 0x17
     2f6:	45 2b       	or	r20, r21
     2f8:	46 2b       	or	r20, r22
     2fa:	47 2b       	or	r20, r23
     2fc:	09 f1       	breq	.+66     	; 0x340 <__stack+0x41>
     2fe:	86 81       	ldd	r24, Z+6	; 0x06
     300:	8f 70       	andi	r24, 0x0F	; 15
     302:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     306:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     30a:	82 ff       	sbrs	r24, 2
     30c:	1c c0       	rjmp	.+56     	; 0x346 <__stack+0x47>
     30e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     312:	88 23       	and	r24, r24
     314:	21 f0       	breq	.+8      	; 0x31e <__stack+0x1f>
     316:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__stack+0x23>
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	3f ef       	ldi	r19, 0xFF	; 255
     322:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     326:	81 11       	cpse	r24, r1
     328:	11 c0       	rjmp	.+34     	; 0x34c <__stack+0x4d>
     32a:	e8 ee       	ldi	r30, 0xE8	; 232
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	8b 77       	andi	r24, 0x7B	; 123
     332:	80 83       	st	Z, r24
     334:	82 2f       	mov	r24, r18
     336:	93 2f       	mov	r25, r19
     338:	08 95       	ret
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9f ef       	ldi	r25, 0xFF	; 255
     33e:	08 95       	ret
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	9f ef       	ldi	r25, 0xFF	; 255
     344:	08 95       	ret
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	9f ef       	ldi	r25, 0xFF	; 255
     34a:	08 95       	ret
     34c:	82 2f       	mov	r24, r18
     34e:	93 2f       	mov	r25, r19
     350:	08 95       	ret

00000352 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     352:	08 95       	ret

00000354 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     35a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     35e:	93 ff       	sbrs	r25, 3
     360:	9f c0       	rjmp	.+318    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     362:	20 81       	ld	r18, Z
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <USB_ControlRequest+0x4>
     36a:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <USB_ControlRequest+0x5>
     36e:	82 17       	cp	r24, r18
     370:	93 07       	cpc	r25, r19
     372:	09 f0       	breq	.+2      	; 0x376 <CDC_Device_ProcessControlRequest+0x22>
     374:	95 c0       	rjmp	.+298    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     376:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
     378:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <USB_ControlRequest+0x1>
     37c:	81 32       	cpi	r24, 0x21	; 33
     37e:	59 f0       	breq	.+22     	; 0x396 <CDC_Device_ProcessControlRequest+0x42>
     380:	18 f4       	brcc	.+6      	; 0x388 <CDC_Device_ProcessControlRequest+0x34>
     382:	80 32       	cpi	r24, 0x20	; 32
     384:	b9 f1       	breq	.+110    	; 0x3f4 <CDC_Device_ProcessControlRequest+0xa0>
     386:	8c c0       	rjmp	.+280    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     388:	82 32       	cpi	r24, 0x22	; 34
     38a:	09 f4       	brne	.+2      	; 0x38e <CDC_Device_ProcessControlRequest+0x3a>
     38c:	5e c0       	rjmp	.+188    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     38e:	83 32       	cpi	r24, 0x23	; 35
     390:	09 f4       	brne	.+2      	; 0x394 <CDC_Device_ProcessControlRequest+0x40>
     392:	78 c0       	rjmp	.+240    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     394:	85 c0       	rjmp	.+266    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     396:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest>
     39a:	81 3a       	cpi	r24, 0xA1	; 161
     39c:	09 f0       	breq	.+2      	; 0x3a0 <CDC_Device_ProcessControlRequest+0x4c>
     39e:	80 c0       	rjmp	.+256    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3a0:	e8 ee       	ldi	r30, 0xE8	; 232
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3aa:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     3ac:	80 ff       	sbrs	r24, 0
     3ae:	fd cf       	rjmp	.-6      	; 0x3aa <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     3b0:	8c 89       	ldd	r24, Y+20	; 0x14
     3b2:	9d 89       	ldd	r25, Y+21	; 0x15
     3b4:	ae 89       	ldd	r26, Y+22	; 0x16
     3b6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     3b8:	e1 ef       	ldi	r30, 0xF1	; 241
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
     3be:	49 2f       	mov	r20, r25
     3c0:	5a 2f       	mov	r21, r26
     3c2:	6b 2f       	mov	r22, r27
     3c4:	77 27       	eor	r23, r23
     3c6:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
     3c8:	ad 01       	movw	r20, r26
     3ca:	66 27       	eor	r22, r22
     3cc:	77 27       	eor	r23, r23
     3ce:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
     3d0:	8b 2f       	mov	r24, r27
     3d2:	99 27       	eor	r25, r25
     3d4:	aa 27       	eor	r26, r26
     3d6:	bb 27       	eor	r27, r27
     3d8:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     3da:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3dc:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     3de:	89 8d       	ldd	r24, Y+25	; 0x19
     3e0:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     3e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3e4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3e6:	e8 ee       	ldi	r30, 0xE8	; 232
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	8e 77       	andi	r24, 0x7E	; 126

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     3ee:	80 83       	st	Z, r24
     3f0:	00 d2       	rcall	.+1024   	; 0x7f2 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:			
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     3f2:	56 c0       	rjmp	.+172    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     3f4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest>
     3f8:	81 32       	cpi	r24, 0x21	; 33
     3fa:	09 f0       	breq	.+2      	; 0x3fe <CDC_Device_ProcessControlRequest+0xaa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3fc:	51 c0       	rjmp	.+162    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     3fe:	e8 ee       	ldi	r30, 0xE8	; 232
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	87 7f       	andi	r24, 0xF7	; 247
     406:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40a:	8e b3       	in	r24, 0x1e	; 30
     40c:	88 23       	and	r24, r24
     40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     410:	47 c0       	rjmp	.+142    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		case CDC_REQ_SetLineEncoding:			
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     412:	80 81       	ld	r24, Z
     414:	82 ff       	sbrs	r24, 2
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     416:	f9 cf       	rjmp	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     418:	e1 ef       	ldi	r30, 0xF1	; 241
     41a:	f0 e0       	ldi	r31, 0x00	; 0
				Data.Bytes[1] = UEDATX;
     41c:	30 81       	ld	r19, Z
				Data.Bytes[2] = UEDATX;
     41e:	20 81       	ld	r18, Z
				Data.Bytes[3] = UEDATX;
     420:	90 81       	ld	r25, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     422:	80 81       	ld	r24, Z
     424:	3c 8b       	std	Y+20, r19	; 0x14
     426:	2d 8b       	std	Y+21, r18	; 0x15
     428:	9e 8b       	std	Y+22, r25	; 0x16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     42a:	8f 8b       	std	Y+23, r24	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     42c:	80 81       	ld	r24, Z
     42e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     430:	80 81       	ld	r24, Z
     432:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     434:	80 81       	ld	r24, Z
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     436:	8a 8f       	std	Y+26, r24	; 0x1a
     438:	e8 ee       	ldi	r30, 0xE8	; 232
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     43e:	8b 77       	andi	r24, 0x7B	; 123

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     440:	80 83       	st	Z, r24
     442:	d7 d1       	rcall	.+942    	; 0x7f2 <Endpoint_ClearStatusStage>
     444:	ce 01       	movw	r24, r28
     446:	4f d6       	rcall	.+3230   	; 0x10e6 <EVENT_CDC_Device_LineEncodingChanged>
			}

			break;
		case CDC_REQ_SetControlLineState:

			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     448:	2b c0       	rjmp	.+86     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     44a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest>
     44e:	81 32       	cpi	r24, 0x21	; 33
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     450:	71 f4       	brne	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     452:	e8 ee       	ldi	r30, 0xE8	; 232
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     458:	87 7f       	andi	r24, 0xF7	; 247
     45a:	80 83       	st	Z, r24

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     45c:	ca d1       	rcall	.+916    	; 0x7f2 <Endpoint_ClearStatusStage>
     45e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
     462:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <USB_ControlRequest+0x3>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     466:	99 8b       	std	Y+17, r25	; 0x11
     468:	88 8b       	std	Y+16, r24	; 0x10
     46a:	ce 01       	movw	r24, r28

/* Josua Arndt*/
			/* RESET MCU on USART to bring it to bootloader */
			/* Keep RESET main MCU low to bring it to reset state*/
			/* manual p.221 changing from input to output high */ 
 			AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;  // from input to output low
     46c:	72 df       	rcall	.-284    	; 0x352 <CDC_Device_Event_Stub>
			AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;// ensure output low
     46e:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     470:	5f 98       	cbi	0x0b, 7	; 11
     472:	87 ec       	ldi	r24, 0xC7	; 199
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			_delay_us(50);	
			/* release RESET pin of main MCU to get it to bootloader*/
			AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK; // pin high
     47c:	00 00       	nop
			/* set the reset line back to tristate, to avoid problems with jtag */
			AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK; // tri state
     47e:	5f 9a       	sbi	0x0b, 7	; 11
	 	
			break;
     480:	5f 9a       	sbi	0x0b, 7	; 11
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     482:	0e c0       	rjmp	.+28     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     484:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest>
     488:	81 32       	cpi	r24, 0x21	; 33
     48a:	51 f4       	brne	.+20     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     48c:	e8 ee       	ldi	r30, 0xE8	; 232
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     492:	87 7f       	andi	r24, 0xF7	; 247
     494:	80 83       	st	Z, r24
     496:	ad d1       	rcall	.+858    	; 0x7f2 <Endpoint_ClearStatusStage>
     498:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
			}

			break;
	}
}
     49c:	ce 01       	movw	r24, r28
     49e:	59 df       	rcall	.-334    	; 0x352 <CDC_Device_Event_Stub>
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <USB_ControlRequest+0x6>
     4b4:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <USB_ControlRequest+0x7>
     4b8:	26 17       	cp	r18, r22
     4ba:	37 07       	cpc	r19, r23
     4bc:	58 f0       	brcs	.+22     	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0x2e>
     4be:	61 15       	cp	r22, r1
     4c0:	71 05       	cpc	r23, r1
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x2c>
     4c4:	e8 ee       	ldi	r30, 0xE8	; 232
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	20 81       	ld	r18, Z
     4ca:	2e 77       	andi	r18, 0x7E	; 126
     4cc:	20 83       	st	Z, r18
     4ce:	9b 01       	movw	r18, r22
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0x2e>
     4d2:	9b 01       	movw	r18, r22
     4d4:	a8 2f       	mov	r26, r24
     4d6:	b9 2f       	mov	r27, r25
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	e8 ee       	ldi	r30, 0xE8	; 232
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	62 ef       	ldi	r22, 0xF2	; 242
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f1 ef       	ldi	r31, 0xF1	; 241
     4e6:	ef 2e       	mov	r14, r31
     4e8:	f1 2c       	mov	r15, r1
     4ea:	f0 2d       	mov	r31, r0
     4ec:	51 e0       	ldi	r21, 0x01	; 1
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	2a c0       	rjmp	.+84     	; 0x546 <Endpoint_Write_Control_Stream_LE+0xa0>
     4f2:	8e b3       	in	r24, 0x1e	; 30
     4f4:	88 23       	and	r24, r24
     4f6:	e9 f1       	breq	.+122    	; 0x572 <Endpoint_Write_Control_Stream_LE+0xcc>
     4f8:	85 30       	cpi	r24, 0x05	; 5
     4fa:	e9 f1       	breq	.+122    	; 0x576 <Endpoint_Write_Control_Stream_LE+0xd0>
     4fc:	80 81       	ld	r24, Z
     4fe:	83 fd       	sbrc	r24, 3
     500:	3c c0       	rjmp	.+120    	; 0x57a <Endpoint_Write_Control_Stream_LE+0xd4>
     502:	80 81       	ld	r24, Z
     504:	82 fd       	sbrc	r24, 2
     506:	2e c0       	rjmp	.+92     	; 0x564 <Endpoint_Write_Control_Stream_LE+0xbe>
     508:	80 81       	ld	r24, Z
     50a:	80 ff       	sbrs	r24, 0
     50c:	1c c0       	rjmp	.+56     	; 0x546 <Endpoint_Write_Control_Stream_LE+0xa0>
     50e:	eb 01       	movw	r28, r22
     510:	88 81       	ld	r24, Y
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	21 15       	cp	r18, r1
     516:	31 05       	cpc	r19, r1
     518:	79 f0       	breq	.+30     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x92>
     51a:	88 30       	cpi	r24, 0x08	; 8
     51c:	91 05       	cpc	r25, r1
     51e:	60 f4       	brcc	.+24     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x92>
     520:	4d 91       	ld	r20, X+
     522:	e7 01       	movw	r28, r14
     524:	48 83       	st	Y, r20
     526:	21 50       	subi	r18, 0x01	; 1
     528:	31 09       	sbc	r19, r1
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	21 15       	cp	r18, r1
     52e:	31 05       	cpc	r19, r1
     530:	19 f0       	breq	.+6      	; 0x538 <Endpoint_Write_Control_Stream_LE+0x92>
     532:	88 30       	cpi	r24, 0x08	; 8
     534:	91 05       	cpc	r25, r1
     536:	a1 f7       	brne	.-24     	; 0x520 <Endpoint_Write_Control_Stream_LE+0x7a>
     538:	45 2f       	mov	r20, r21
     53a:	08 97       	sbiw	r24, 0x08	; 8
     53c:	09 f0       	breq	.+2      	; 0x540 <Endpoint_Write_Control_Stream_LE+0x9a>
     53e:	41 2f       	mov	r20, r17
     540:	80 81       	ld	r24, Z
     542:	8e 77       	andi	r24, 0x7E	; 126
     544:	80 83       	st	Z, r24
     546:	21 15       	cp	r18, r1
     548:	31 05       	cpc	r19, r1
     54a:	99 f6       	brne	.-90     	; 0x4f2 <Endpoint_Write_Control_Stream_LE+0x4c>
     54c:	41 11       	cpse	r20, r1
     54e:	d1 cf       	rjmp	.-94     	; 0x4f2 <Endpoint_Write_Control_Stream_LE+0x4c>
     550:	09 c0       	rjmp	.+18     	; 0x564 <Endpoint_Write_Control_Stream_LE+0xbe>
     552:	8e b3       	in	r24, 0x1e	; 30
     554:	88 23       	and	r24, r24
     556:	99 f0       	breq	.+38     	; 0x57e <Endpoint_Write_Control_Stream_LE+0xd8>
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	99 f0       	breq	.+38     	; 0x582 <Endpoint_Write_Control_Stream_LE+0xdc>
     55c:	80 81       	ld	r24, Z
     55e:	83 ff       	sbrs	r24, 3
     560:	03 c0       	rjmp	.+6      	; 0x568 <Endpoint_Write_Control_Stream_LE+0xc2>
     562:	11 c0       	rjmp	.+34     	; 0x586 <Endpoint_Write_Control_Stream_LE+0xe0>
     564:	e8 ee       	ldi	r30, 0xE8	; 232
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	82 ff       	sbrs	r24, 2
     56c:	f2 cf       	rjmp	.-28     	; 0x552 <Endpoint_Write_Control_Stream_LE+0xac>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0b c0       	rjmp	.+22     	; 0x588 <Endpoint_Write_Control_Stream_LE+0xe2>
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	09 c0       	rjmp	.+18     	; 0x588 <Endpoint_Write_Control_Stream_LE+0xe2>
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	07 c0       	rjmp	.+14     	; 0x588 <Endpoint_Write_Control_Stream_LE+0xe2>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	05 c0       	rjmp	.+10     	; 0x588 <Endpoint_Write_Control_Stream_LE+0xe2>
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	03 c0       	rjmp	.+6      	; 0x588 <Endpoint_Write_Control_Stream_LE+0xe2>
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	01 c0       	rjmp	.+2      	; 0x588 <Endpoint_Write_Control_Stream_LE+0xe2>
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     59e:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <USB_ControlRequest+0x6>
     5a2:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <USB_ControlRequest+0x7>
     5a6:	26 17       	cp	r18, r22
     5a8:	37 07       	cpc	r19, r23
     5aa:	58 f0       	brcs	.+22     	; 0x5c2 <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5ac:	61 15       	cp	r22, r1
     5ae:	71 05       	cpc	r23, r1
     5b0:	39 f4       	brne	.+14     	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5b2:	e8 ee       	ldi	r30, 0xE8	; 232
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	20 81       	ld	r18, Z
     5b8:	2e 77       	andi	r18, 0x7E	; 126
     5ba:	20 83       	st	Z, r18
     5bc:	9b 01       	movw	r18, r22
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <Endpoint_Write_Control_PStream_LE+0x2e>
     5c0:	9b 01       	movw	r18, r22
     5c2:	e8 2f       	mov	r30, r24
     5c4:	f9 2f       	mov	r31, r25
     5c6:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5c8:	a8 ee       	ldi	r26, 0xE8	; 232
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5cc:	42 ef       	ldi	r20, 0xF2	; 242
     5ce:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f1 ef       	ldi	r31, 0xF1	; 241
     5d4:	ef 2e       	mov	r14, r31
     5d6:	f1 2c       	mov	r15, r1
     5d8:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	2d c0       	rjmp	.+90     	; 0x63a <Endpoint_Write_Control_PStream_LE+0xa6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5e2:	88 23       	and	r24, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x54>
     5e6:	3f c0       	rjmp	.+126    	; 0x666 <Endpoint_Write_Control_PStream_LE+0xd2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5e8:	85 30       	cpi	r24, 0x05	; 5
     5ea:	09 f4       	brne	.+2      	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x5a>
     5ec:	3e c0       	rjmp	.+124    	; 0x66a <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5ee:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5f0:	83 fd       	sbrc	r24, 3
     5f2:	3d c0       	rjmp	.+122    	; 0x66e <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5f4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5f6:	82 fd       	sbrc	r24, 2
     5f8:	2f c0       	rjmp	.+94     	; 0x658 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5fa:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     5fc:	80 ff       	sbrs	r24, 0
     5fe:	1d c0       	rjmp	.+58     	; 0x63a <Endpoint_Write_Control_PStream_LE+0xa6>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     600:	ea 01       	movw	r28, r20
     602:	88 81       	ld	r24, Y
     604:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     606:	21 15       	cp	r18, r1
     608:	31 05       	cpc	r19, r1
     60a:	81 f0       	breq	.+32     	; 0x62c <Endpoint_Write_Control_PStream_LE+0x98>
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	91 05       	cpc	r25, r1
     610:	68 f4       	brcc	.+26     	; 0x62c <Endpoint_Write_Control_PStream_LE+0x98>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     612:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     614:	e7 01       	movw	r28, r14
     616:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     618:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     61a:	21 50       	subi	r18, 0x01	; 1
     61c:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     61e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     620:	21 15       	cp	r18, r1
     622:	31 05       	cpc	r19, r1
     624:	19 f0       	breq	.+6      	; 0x62c <Endpoint_Write_Control_PStream_LE+0x98>
     626:	88 30       	cpi	r24, 0x08	; 8
     628:	91 05       	cpc	r25, r1
     62a:	99 f7       	brne	.-26     	; 0x612 <Endpoint_Write_Control_PStream_LE+0x7e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     62c:	67 2f       	mov	r22, r23
     62e:	08 97       	sbiw	r24, 0x08	; 8
     630:	09 f0       	breq	.+2      	; 0x634 <Endpoint_Write_Control_PStream_LE+0xa0>
     632:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     634:	8c 91       	ld	r24, X
     636:	8e 77       	andi	r24, 0x7E	; 126
     638:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     63a:	21 15       	cp	r18, r1
     63c:	31 05       	cpc	r19, r1
     63e:	81 f6       	brne	.-96     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x4c>
     640:	61 11       	cpse	r22, r1
     642:	ce cf       	rjmp	.-100    	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x4c>
     644:	09 c0       	rjmp	.+18     	; 0x658 <Endpoint_Write_Control_PStream_LE+0xc4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     646:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     648:	88 23       	and	r24, r24
     64a:	99 f0       	breq	.+38     	; 0x672 <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     64c:	85 30       	cpi	r24, 0x05	; 5
     64e:	99 f0       	breq	.+38     	; 0x676 <Endpoint_Write_Control_PStream_LE+0xe2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     650:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     652:	83 ff       	sbrs	r24, 3
     654:	03 c0       	rjmp	.+6      	; 0x65c <Endpoint_Write_Control_PStream_LE+0xc8>
     656:	11 c0       	rjmp	.+34     	; 0x67a <Endpoint_Write_Control_PStream_LE+0xe6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     658:	e8 ee       	ldi	r30, 0xE8	; 232
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     65e:	82 ff       	sbrs	r24, 2
     660:	f2 cf       	rjmp	.-28     	; 0x646 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0b c0       	rjmp	.+22     	; 0x67c <Endpoint_Write_Control_PStream_LE+0xe8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	09 c0       	rjmp	.+18     	; 0x67c <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	07 c0       	rjmp	.+14     	; 0x67c <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	05 c0       	rjmp	.+10     	; 0x67c <Endpoint_Write_Control_PStream_LE+0xe8>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	03 c0       	rjmp	.+6      	; 0x67c <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     676:	83 e0       	ldi	r24, 0x03	; 3
     678:	01 c0       	rjmp	.+2      	; 0x67c <Endpoint_Write_Control_PStream_LE+0xe8>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     67a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	08 95       	ret

00000688 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	85 30       	cpi	r24, 0x05	; 5
     6a0:	70 f1       	brcs	.+92     	; 0x6fe <Endpoint_ConfigureEndpoint_Prv+0x76>
     6a2:	26 c0       	rjmp	.+76     	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x68>
     6a4:	29 2f       	mov	r18, r25
     6a6:	2f 70       	andi	r18, 0x0F	; 15
     6a8:	e7 01       	movw	r28, r14
     6aa:	28 83       	st	Y, r18
     6ac:	89 17       	cp	r24, r25
     6ae:	31 f0       	breq	.+12     	; 0x6bc <Endpoint_ConfigureEndpoint_Prv+0x34>
     6b0:	e8 01       	movw	r28, r16
     6b2:	78 81       	ld	r23, Y
     6b4:	20 81       	ld	r18, Z
     6b6:	e4 01       	movw	r28, r8
     6b8:	58 81       	ld	r21, Y
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     6bc:	24 2f       	mov	r18, r20
     6be:	76 2f       	mov	r23, r22
     6c0:	5b 2d       	mov	r21, r11
     6c2:	21 ff       	sbrs	r18, 1
     6c4:	12 c0       	rjmp	.+36     	; 0x6ea <Endpoint_ConfigureEndpoint_Prv+0x62>
     6c6:	3c 91       	ld	r19, X
     6c8:	3e 7f       	andi	r19, 0xFE	; 254
     6ca:	3c 93       	st	X, r19
     6cc:	30 81       	ld	r19, Z
     6ce:	3d 7f       	andi	r19, 0xFD	; 253
     6d0:	30 83       	st	Z, r19
     6d2:	3c 91       	ld	r19, X
     6d4:	31 60       	ori	r19, 0x01	; 1
     6d6:	3c 93       	st	X, r19
     6d8:	e8 01       	movw	r28, r16
     6da:	78 83       	st	Y, r23
     6dc:	20 83       	st	Z, r18
     6de:	e4 01       	movw	r28, r8
     6e0:	58 83       	st	Y, r21
     6e2:	e6 01       	movw	r28, r12
     6e4:	28 81       	ld	r18, Y
     6e6:	22 23       	and	r18, r18
     6e8:	44 f4       	brge	.+16     	; 0x6fa <Endpoint_ConfigureEndpoint_Prv+0x72>
     6ea:	9f 5f       	subi	r25, 0xFF	; 255
     6ec:	95 30       	cpi	r25, 0x05	; 5
     6ee:	d1 f6       	brne	.-76     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     6f0:	8f 70       	andi	r24, 0x0F	; 15
     6f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	21 c0       	rjmp	.+66     	; 0x73c <Endpoint_ConfigureEndpoint_Prv+0xb4>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	1f c0       	rjmp	.+62     	; 0x73c <Endpoint_ConfigureEndpoint_Prv+0xb4>
     6fe:	98 2f       	mov	r25, r24
     700:	9f 70       	andi	r25, 0x0F	; 15
     702:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     706:	98 2f       	mov	r25, r24
     708:	24 2f       	mov	r18, r20
     70a:	76 2f       	mov	r23, r22
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	ab ee       	ldi	r26, 0xEB	; 235
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	ed ee       	ldi	r30, 0xED	; 237
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	0c ee       	ldi	r16, 0xEC	; 236
     718:	10 e0       	ldi	r17, 0x00	; 0
     71a:	0f 2e       	mov	r0, r31
     71c:	f0 ef       	ldi	r31, 0xF0	; 240
     71e:	8f 2e       	mov	r8, r31
     720:	91 2c       	mov	r9, r1
     722:	f0 2d       	mov	r31, r0
     724:	0f 2e       	mov	r0, r31
     726:	fe ee       	ldi	r31, 0xEE	; 238
     728:	cf 2e       	mov	r12, r31
     72a:	d1 2c       	mov	r13, r1
     72c:	f0 2d       	mov	r31, r0
     72e:	0f 2e       	mov	r0, r31
     730:	f9 ee       	ldi	r31, 0xE9	; 233
     732:	ef 2e       	mov	r14, r31
     734:	f1 2c       	mov	r15, r1
     736:	f0 2d       	mov	r31, r0
     738:	b1 2c       	mov	r11, r1
     73a:	c3 cf       	rjmp	.-122    	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	bf 90       	pop	r11
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	08 95       	ret

00000754 <Endpoint_ConfigureEndpointTable>:
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	66 23       	and	r22, r22
     762:	e9 f1       	breq	.+122    	; 0x7de <Endpoint_ConfigureEndpointTable+0x8a>
     764:	06 2f       	mov	r16, r22
     766:	c8 2f       	mov	r28, r24
     768:	d9 2f       	mov	r29, r25
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	0f 2e       	mov	r0, r31
     76e:	f6 e0       	ldi	r31, 0x06	; 6
     770:	ff 2e       	mov	r15, r31
     772:	f0 2d       	mov	r31, r0
     774:	68 94       	set
     776:	ee 24       	eor	r14, r14
     778:	e1 f8       	bld	r14, 1
     77a:	58 81       	ld	r21, Y
     77c:	55 23       	and	r21, r21
     77e:	49 f1       	breq	.+82     	; 0x7d2 <Endpoint_ConfigureEndpointTable+0x7e>
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	6b 81       	ldd	r22, Y+3	; 0x03
     788:	85 2f       	mov	r24, r21
     78a:	8f 70       	andi	r24, 0x0F	; 15
     78c:	85 30       	cpi	r24, 0x05	; 5
     78e:	48 f5       	brcc	.+82     	; 0x7e2 <Endpoint_ConfigureEndpointTable+0x8e>
     790:	92 30       	cpi	r25, 0x02	; 2
     792:	10 f4       	brcc	.+4      	; 0x798 <Endpoint_ConfigureEndpointTable+0x44>
     794:	4e 2d       	mov	r20, r14
     796:	01 c0       	rjmp	.+2      	; 0x79a <Endpoint_ConfigureEndpointTable+0x46>
     798:	4f 2d       	mov	r20, r15
     79a:	e9 30       	cpi	r30, 0x09	; 9
     79c:	f1 05       	cpc	r31, r1
     79e:	50 f0       	brcs	.+20     	; 0x7b4 <Endpoint_ConfigureEndpointTable+0x60>
     7a0:	28 e0       	ldi	r18, 0x08	; 8
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9f 5f       	subi	r25, 0xFF	; 255
     7a8:	22 0f       	add	r18, r18
     7aa:	33 1f       	adc	r19, r19
     7ac:	2e 17       	cp	r18, r30
     7ae:	3f 07       	cpc	r19, r31
     7b0:	d0 f3       	brcs	.-12     	; 0x7a6 <Endpoint_ConfigureEndpointTable+0x52>
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Endpoint_ConfigureEndpointTable+0x62>
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	92 95       	swap	r25
     7b8:	90 7f       	andi	r25, 0xF0	; 240
     7ba:	49 2b       	or	r20, r25
     7bc:	62 95       	swap	r22
     7be:	66 0f       	add	r22, r22
     7c0:	66 0f       	add	r22, r22
     7c2:	60 7c       	andi	r22, 0xC0	; 192
     7c4:	55 1f       	adc	r21, r21
     7c6:	55 27       	eor	r21, r21
     7c8:	55 1f       	adc	r21, r21
     7ca:	65 2b       	or	r22, r21
     7cc:	5d df       	rcall	.-326    	; 0x688 <Endpoint_ConfigureEndpoint_Prv>
     7ce:	88 23       	and	r24, r24
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <Endpoint_ConfigureEndpointTable+0x90>
     7d2:	1f 5f       	subi	r17, 0xFF	; 255
     7d4:	25 96       	adiw	r28, 0x05	; 5
     7d6:	01 13       	cpse	r16, r17
     7d8:	d0 cf       	rjmp	.-96     	; 0x77a <Endpoint_ConfigureEndpointTable+0x26>
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <Endpoint_ConfigureEndpointTable+0x90>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <Endpoint_ConfigureEndpointTable+0x90>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	08 95       	ret

000007f2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7f2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest>
     7f6:	88 23       	and	r24, r24
     7f8:	3c f0       	brlt	.+14     	; 0x808 <Endpoint_ClearStatusStage+0x16>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fa:	e8 ee       	ldi	r30, 0xE8	; 232
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	12 c0       	rjmp	.+36     	; 0x824 <Endpoint_ClearStatusStage+0x32>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     800:	8e b3       	in	r24, 0x1e	; 30
     802:	81 11       	cpse	r24, r1
     804:	03 c0       	rjmp	.+6      	; 0x80c <Endpoint_ClearStatusStage+0x1a>
     806:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     808:	e8 ee       	ldi	r30, 0xE8	; 232
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     80e:	82 ff       	sbrs	r24, 2
     810:	f7 cf       	rjmp	.-18     	; 0x800 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     812:	e8 ee       	ldi	r30, 0xE8	; 232
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8b 77       	andi	r24, 0x7B	; 123
     81a:	80 83       	st	Z, r24
     81c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     81e:	8e b3       	in	r24, 0x1e	; 30
     820:	88 23       	and	r24, r24
     822:	41 f0       	breq	.+16     	; 0x834 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     824:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     826:	80 ff       	sbrs	r24, 0
     828:	fa cf       	rjmp	.-12     	; 0x81e <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     82a:	e8 ee       	ldi	r30, 0xE8	; 232
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	8e 77       	andi	r24, 0x7E	; 126
     832:	80 83       	st	Z, r24
     834:	08 95       	ret

00000836 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     83e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     842:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     846:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     848:	ac ee       	ldi	r26, 0xEC	; 236
     84a:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     84c:	e8 ee       	ldi	r30, 0xE8	; 232
     84e:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     850:	0b ee       	ldi	r16, 0xEB	; 235
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	44 ee       	ldi	r20, 0xE4	; 228
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	01 c0       	rjmp	.+2      	; 0x85c <Endpoint_WaitUntilReady+0x26>
     85a:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     85c:	9c 91       	ld	r25, X
     85e:	89 2f       	mov	r24, r25
     860:	81 70       	andi	r24, 0x01	; 1
     862:	90 fd       	sbrc	r25, 0
     864:	1c c0       	rjmp	.+56     	; 0x89e <Endpoint_WaitUntilReady+0x68>
     866:	1f c0       	rjmp	.+62     	; 0x8a6 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     868:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     86a:	88 23       	and	r24, r24
     86c:	81 f0       	breq	.+32     	; 0x88e <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     86e:	85 30       	cpi	r24, 0x05	; 5
     870:	81 f0       	breq	.+32     	; 0x892 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     872:	e8 01       	movw	r28, r16
     874:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     876:	85 fd       	sbrc	r24, 5
     878:	0e c0       	rjmp	.+28     	; 0x896 <Endpoint_WaitUntilReady+0x60>
     87a:	ea 01       	movw	r28, r20
     87c:	88 81       	ld	r24, Y
     87e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	59 f3       	breq	.-42     	; 0x85c <Endpoint_WaitUntilReady+0x26>
     886:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     888:	41 f7       	brne	.-48     	; 0x85a <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	0f c0       	rjmp	.+30     	; 0x8ac <Endpoint_WaitUntilReady+0x76>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	0d c0       	rjmp	.+26     	; 0x8ac <Endpoint_WaitUntilReady+0x76>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	0b c0       	rjmp	.+22     	; 0x8ac <Endpoint_WaitUntilReady+0x76>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	09 c0       	rjmp	.+18     	; 0x8ac <Endpoint_WaitUntilReady+0x76>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <Endpoint_WaitUntilReady+0x76>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     89e:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     8a0:	80 ff       	sbrs	r24, 0
     8a2:	e2 cf       	rjmp	.-60     	; 0x868 <Endpoint_WaitUntilReady+0x32>
     8a4:	fa cf       	rjmp	.-12     	; 0x89a <Endpoint_WaitUntilReady+0x64>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8a6:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8a8:	92 ff       	sbrs	r25, 2
     8aa:	de cf       	rjmp	.-68     	; 0x868 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	08 95       	ret

000008b6 <USB_ResetInterface>:
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     8b6:	3b d0       	rcall	.+118    	; 0x92e <USB_INT_DisableAllInterrupts>
     8b8:	3d d0       	rcall	.+122    	; 0x934 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8ba:	e8 ed       	ldi	r30, 0xD8	; 216
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	8f 77       	andi	r24, 0x7F	; 127
     8c2:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     8c4:	80 81       	ld	r24, Z
     8c6:	80 68       	ori	r24, 0x80	; 128
     8c8:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8ca:	80 81       	ld	r24, Z
     8cc:	8f 7d       	andi	r24, 0xDF	; 223
     8ce:	80 83       	st	Z, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8d8:	09 b4       	in	r0, 0x29	; 41
     8da:	00 fe       	sbrs	r0, 0
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <USB_ResetInterface+0x22>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     8de:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     8e0:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8e4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8e8:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8ec:	42 e0       	ldi	r20, 0x02	; 2
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	ca de       	rcall	.-620    	; 0x688 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8f4:	e1 ee       	ldi	r30, 0xE1	; 225
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	8e 7f       	andi	r24, 0xFE	; 254
     8fc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8fe:	e2 ee       	ldi	r30, 0xE2	; 226
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	81 60       	ori	r24, 0x01	; 1
     906:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     908:	80 81       	ld	r24, Z
     90a:	88 60       	ori	r24, 0x08	; 8
     90c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     90e:	e0 ee       	ldi	r30, 0xE0	; 224
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	8e 7f       	andi	r24, 0xFE	; 254
     916:	80 83       	st	Z, r24
     918:	08 95       	ret

0000091a <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     91a:	e3 e6       	ldi	r30, 0x63	; 99
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <USB_IsInitialized>

	USB_ResetInterface();
     92a:	c5 cf       	rjmp	.-118    	; 0x8b6 <USB_ResetInterface>
     92c:	08 95       	ret

0000092e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     92e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     932:	08 95       	ret

00000934 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     934:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     938:	08 95       	ret

0000093a <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     95c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     960:	82 ff       	sbrs	r24, 2
     962:	0a c0       	rjmp	.+20     	; 0x978 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     964:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     968:	82 ff       	sbrs	r24, 2
     96a:	06 c0       	rjmp	.+12     	; 0x978 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     96c:	e1 ee       	ldi	r30, 0xE1	; 225
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	8b 7f       	andi	r24, 0xFB	; 251
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     974:	80 83       	st	Z, r24
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     976:	45 d2       	rcall	.+1162   	; 0xe02 <USB_Event_Stub>
     978:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     97c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     97e:	14 c0       	rjmp	.+40     	; 0x9a8 <__vector_11+0x6e>
     980:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     984:	80 ff       	sbrs	r24, 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     986:	10 c0       	rjmp	.+32     	; 0x9a8 <__vector_11+0x6e>
     988:	e2 ee       	ldi	r30, 0xE2	; 226
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     990:	80 83       	st	Z, r24
     992:	80 81       	ld	r24, Z
     994:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     996:	80 83       	st	Z, r24
     998:	e8 ed       	ldi	r30, 0xD8	; 216
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	80 62       	ori	r24, 0x20	; 32
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
     9a0:	80 83       	st	Z, r24
     9a2:	19 bc       	out	0x29, r1	; 41
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9a4:	1e ba       	out	0x1e, r1	; 30
     9a6:	4b d3       	rcall	.+1686   	; 0x103e <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9ac:	84 ff       	sbrs	r24, 4
     9ae:	2d c0       	rjmp	.+90     	; 0xa0a <__vector_11+0xd0>
     9b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9b4:	84 ff       	sbrs	r24, 4
     9b6:	29 c0       	rjmp	.+82     	; 0xa0a <__vector_11+0xd0>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9bc:	86 e0       	ldi	r24, 0x06	; 6
     9be:	89 bd       	out	0x29, r24	; 41
     9c0:	09 b4       	in	r0, 0x29	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9c2:	00 fe       	sbrs	r0, 0
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <__vector_11+0x86>
     9c6:	e8 ed       	ldi	r30, 0xD8	; 216
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9cc:	8f 7d       	andi	r24, 0xDF	; 223
     9ce:	80 83       	st	Z, r24
     9d0:	e1 ee       	ldi	r30, 0xE1	; 225
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9d6:	8f 7e       	andi	r24, 0xEF	; 239
     9d8:	80 83       	st	Z, r24
     9da:	e2 ee       	ldi	r30, 0xE2	; 226
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9e0:	8f 7e       	andi	r24, 0xEF	; 239
     9e2:	80 83       	st	Z, r24
     9e4:	80 81       	ld	r24, Z
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 83       	st	Z, r24
     9ea:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
     9ee:	88 23       	and	r24, r24
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <__vector_11+0xbe>
     9f2:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9f4:	8e bb       	out	0x1e, r24	; 30
     9f6:	08 c0       	rjmp	.+16     	; 0xa08 <__vector_11+0xce>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     9f8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     9fc:	88 23       	and	r24, r24
     9fe:	14 f0       	brlt	.+4      	; 0xa04 <__vector_11+0xca>
     a00:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <__vector_11+0xcc>
     a04:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a06:	8e bb       	out	0x1e, r24	; 30
     a08:	18 d3       	rcall	.+1584   	; 0x103a <EVENT_USB_Device_Connect>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a0a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a0e:	83 ff       	sbrs	r24, 3
     a10:	22 c0       	rjmp	.+68     	; 0xa56 <__vector_11+0x11c>
     a12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a16:	83 ff       	sbrs	r24, 3
     a18:	1e c0       	rjmp	.+60     	; 0xa56 <__vector_11+0x11c>
     a1a:	e1 ee       	ldi	r30, 0xE1	; 225
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a20:	87 7f       	andi	r24, 0xF7	; 247
     a22:	80 83       	st	Z, r24
		USB_Device_ConfigurationNumber = 0;
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	8e bb       	out	0x1e, r24	; 30
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a28:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <USB_Device_ConfigurationNumber>
     a2c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a2e:	8e 7f       	andi	r24, 0xFE	; 254
     a30:	80 83       	st	Z, r24
     a32:	e2 ee       	ldi	r30, 0xE2	; 226
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a38:	8e 7f       	andi	r24, 0xFE	; 254
     a3a:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a3c:	80 81       	ld	r24, Z
     a3e:	80 61       	ori	r24, 0x10	; 16
     a40:	80 83       	st	Z, r24
     a42:	42 e0       	ldi	r20, 0x02	; 2
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	1f de       	rcall	.-962    	; 0x688 <Endpoint_ConfigureEndpoint_Prv>
     a4a:	e0 ef       	ldi	r30, 0xF0	; 240

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a50:	88 60       	ori	r24, 0x08	; 8
     a52:	80 83       	st	Z, r24
     a54:	d6 d1       	rcall	.+940    	; 0xe02 <USB_Event_Stub>
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     aa6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     aaa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     aac:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     ab0:	d8 2f       	mov	r29, r24
     ab2:	d1 70       	andi	r29, 0x01	; 1
     ab4:	80 fd       	sbrc	r24, 0
     ab6:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ab8:	0f 2e       	mov	r0, r31
     aba:	f9 ee       	ldi	r31, 0xE9	; 233
     abc:	ef 2e       	mov	r14, r31
     abe:	f1 2c       	mov	r15, r1
     ac0:	f0 2d       	mov	r31, r0
     ac2:	f7 01       	movw	r30, r14
     ac4:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     ac6:	00 ef       	ldi	r16, 0xF0	; 240
     ac8:	10 e0       	ldi	r17, 0x00	; 0
     aca:	f8 01       	movw	r30, r16
     acc:	80 81       	ld	r24, Z
     ace:	87 7f       	andi	r24, 0xF7	; 247
     ad0:	80 83       	st	Z, r24
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     ad2:	78 94       	sei
     ad4:	21 d0       	rcall	.+66     	; 0xb18 <USB_Device_ProcessControlRequest>
     ad6:	f7 01       	movw	r30, r14
     ad8:	10 82       	st	Z, r1
     ada:	f8 01       	movw	r30, r16
     adc:	80 81       	ld	r24, Z
     ade:	88 60       	ori	r24, 0x08	; 8
     ae0:	80 83       	st	Z, r24
     ae2:	cd 2b       	or	r28, r29
     ae4:	cf 70       	andi	r28, 0x0F	; 15
     ae6:	f7 01       	movw	r30, r14
     ae8:	c0 83       	st	Z, r28
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	aa 97       	sbiw	r28, 0x2a	; 42
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	e8 e3       	ldi	r30, 0x38	; 56
     b32:	f2 e0       	ldi	r31, 0x02	; 2
     b34:	20 e4       	ldi	r18, 0x40	; 64
     b36:	32 e0       	ldi	r19, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b38:	a1 ef       	ldi	r26, 0xF1	; 241
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b3e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b40:	2e 17       	cp	r18, r30
     b42:	3f 07       	cpc	r19, r31
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b44:	d9 f7       	brne	.-10     	; 0xb3c <USB_Device_ProcessControlRequest+0x24>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b46:	82 d2       	rcall	.+1284   	; 0x104c <EVENT_USB_Device_ControlRequest>
     b48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     b4c:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b4e:	34 c1       	rjmp	.+616    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     b50:	e8 e3       	ldi	r30, 0x38	; 56
     b52:	f2 e0       	ldi	r31, 0x02	; 2

		switch (USB_ControlRequest.bRequest)
     b54:	90 81       	ld	r25, Z
     b56:	81 81       	ldd	r24, Z+1	; 0x01
     b58:	85 30       	cpi	r24, 0x05	; 5
     b5a:	09 f4       	brne	.+2      	; 0xb5e <USB_Device_ProcessControlRequest+0x46>
     b5c:	7f c0       	rjmp	.+254    	; 0xc5c <USB_Device_ProcessControlRequest+0x144>
     b5e:	30 f4       	brcc	.+12     	; 0xb6c <USB_Device_ProcessControlRequest+0x54>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	c9 f1       	breq	.+114    	; 0xbd6 <USB_Device_ProcessControlRequest+0xbe>
     b64:	68 f0       	brcs	.+26     	; 0xb80 <USB_Device_ProcessControlRequest+0x68>
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	b1 f1       	breq	.+108    	; 0xbd6 <USB_Device_ProcessControlRequest+0xbe>
     b6a:	26 c1       	rjmp	.+588    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     b6c:	88 30       	cpi	r24, 0x08	; 8
     b6e:	09 f4       	brne	.+2      	; 0xb72 <USB_Device_ProcessControlRequest+0x5a>
     b70:	f0 c0       	rjmp	.+480    	; 0xd52 <USB_Device_ProcessControlRequest+0x23a>
     b72:	89 30       	cpi	r24, 0x09	; 9
     b74:	09 f4       	brne	.+2      	; 0xb78 <USB_Device_ProcessControlRequest+0x60>
     b76:	fd c0       	rjmp	.+506    	; 0xd72 <USB_Device_ProcessControlRequest+0x25a>
     b78:	86 30       	cpi	r24, 0x06	; 6
     b7a:	09 f0       	breq	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x66>
     b7c:	1d c1       	rjmp	.+570    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b7e:	90 c0       	rjmp	.+288    	; 0xca0 <USB_Device_ProcessControlRequest+0x188>
     b80:	90 38       	cpi	r25, 0x80	; 128
     b82:	21 f0       	breq	.+8      	; 0xb8c <USB_Device_ProcessControlRequest+0x74>
     b84:	92 38       	cpi	r25, 0x82	; 130
     b86:	09 f0       	breq	.+2      	; 0xb8a <USB_Device_ProcessControlRequest+0x72>
     b88:	17 c1       	rjmp	.+558    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b8a:	08 c0       	rjmp	.+16     	; 0xb9c <USB_Device_ProcessControlRequest+0x84>
     b8c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b90:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <USB_Device_RemoteWakeupEnabled>
     b94:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b96:	89 f0       	breq	.+34     	; 0xbba <USB_Device_ProcessControlRequest+0xa2>
     b98:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b9a:	0f c0       	rjmp	.+30     	; 0xbba <USB_Device_ProcessControlRequest+0xa2>
     b9c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     ba0:	8f 70       	andi	r24, 0x0F	; 15
     ba2:	85 30       	cpi	r24, 0x05	; 5
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <USB_Device_ProcessControlRequest+0x90>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ba6:	08 c1       	rjmp	.+528    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     ba8:	e9 ee       	ldi	r30, 0xE9	; 233
     baa:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bac:	80 83       	st	Z, r24
     bae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     bb2:	85 fb       	bst	r24, 5
     bb4:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb6:	80 f9       	bld	r24, 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb8:	10 82       	st	Z, r1
     bba:	e8 ee       	ldi	r30, 0xE8	; 232
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	90 81       	ld	r25, Z
     bc0:	97 7f       	andi	r25, 0xF7	; 247
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bc2:	90 83       	st	Z, r25
     bc4:	a1 ef       	ldi	r26, 0xF1	; 241
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
				UEDATX = (Data >> 8);
     bc8:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bca:	1c 92       	st	X, r1
     bcc:	80 81       	ld	r24, Z
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     bce:	8e 77       	andi	r24, 0x7E	; 126
     bd0:	80 83       	st	Z, r24
     bd2:	0f de       	rcall	.-994    	; 0x7f2 <Endpoint_ClearStatusStage>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bd4:	f1 c0       	rjmp	.+482    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     bd6:	99 23       	and	r25, r25
     bd8:	09 f4       	brne	.+2      	; 0xbdc <USB_Device_ProcessControlRequest+0xc4>
     bda:	fd c0       	rjmp	.+506    	; 0xdd6 <USB_Device_ProcessControlRequest+0x2be>
     bdc:	92 30       	cpi	r25, 0x02	; 2
     bde:	09 f0       	breq	.+2      	; 0xbe2 <USB_Device_ProcessControlRequest+0xca>
     be0:	eb c0       	rjmp	.+470    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     be2:	fe c0       	rjmp	.+508    	; 0xde0 <USB_Device_ProcessControlRequest+0x2c8>
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	09 f0       	breq	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0xd4>
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <USB_Device_RemoteWakeupEnabled>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bf0:	2c c0       	rjmp	.+88     	; 0xc4a <USB_Device_ProcessControlRequest+0x132>
     bf2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     bf6:	8f 70       	andi	r24, 0x0F	; 15
     bf8:	9f ef       	ldi	r25, 0xFF	; 255
     bfa:	98 0f       	add	r25, r24
     bfc:	94 30       	cpi	r25, 0x04	; 4
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0xea>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c00:	db c0       	rjmp	.+438    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     c02:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c06:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c0a:	90 ff       	sbrs	r25, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c0c:	1e c0       	rjmp	.+60     	; 0xc4a <USB_Device_ProcessControlRequest+0x132>
     c0e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <USB_ControlRequest+0x1>
     c12:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c14:	31 f4       	brne	.+12     	; 0xc22 <USB_Device_ProcessControlRequest+0x10a>
     c16:	eb ee       	ldi	r30, 0xEB	; 235
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 62       	ori	r24, 0x20	; 32
     c1e:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <USB_Device_ProcessControlRequest+0x132>
     c22:	eb ee       	ldi	r30, 0xEB	; 235
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	90 81       	ld	r25, Z
     c28:	90 61       	ori	r25, 0x10	; 16
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c2a:	90 83       	st	Z, r25
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	a9 01       	movw	r20, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <USB_Device_ProcessControlRequest+0x120>
     c34:	44 0f       	add	r20, r20
     c36:	55 1f       	adc	r21, r21
     c38:	8a 95       	dec	r24
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <USB_Device_ProcessControlRequest+0x11c>
     c3c:	aa ee       	ldi	r26, 0xEA	; 234
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
				UERST = 0;
     c40:	4c 93       	st	X, r20

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c42:	1c 92       	st	X, r1
     c44:	80 81       	ld	r24, Z
     c46:	88 60       	ori	r24, 0x08	; 8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c48:	80 83       	st	Z, r24
     c4a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c4e:	e8 ee       	ldi	r30, 0xE8	; 232
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c54:	87 7f       	andi	r24, 0xF7	; 247
     c56:	80 83       	st	Z, r24
     c58:	cc dd       	rcall	.-1128   	; 0x7f2 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c5a:	ae c0       	rjmp	.+348    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     c5c:	91 11       	cpse	r25, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c5e:	ac c0       	rjmp	.+344    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     c60:	10 91 3a 02 	lds	r17, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c64:	1f 77       	andi	r17, 0x7F	; 127
     c66:	e3 ee       	ldi	r30, 0xE3	; 227
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	80 78       	andi	r24, 0x80	; 128
     c6e:	81 2b       	or	r24, r17
     c70:	80 83       	st	Z, r24
     c72:	e8 ee       	ldi	r30, 0xE8	; 232
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c78:	87 7f       	andi	r24, 0xF7	; 247
     c7a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c7c:	ba dd       	rcall	.-1164   	; 0x7f2 <Endpoint_ClearStatusStage>
     c7e:	e8 ee       	ldi	r30, 0xE8	; 232
     c80:	f0 e0       	ldi	r31, 0x00	; 0

	while (!(Endpoint_IsINReady()));
     c82:	80 81       	ld	r24, Z
     c84:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     c86:	fd cf       	rjmp	.-6      	; 0xc82 <USB_Device_ProcessControlRequest+0x16a>
     c88:	e3 ee       	ldi	r30, 0xE3	; 227
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	80 68       	ori	r24, 0x80	; 128

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c90:	80 83       	st	Z, r24
     c92:	11 11       	cpse	r17, r1
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <USB_Device_ProcessControlRequest+0x182>
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <USB_Device_ProcessControlRequest+0x184>
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8e bb       	out	0x1e, r24	; 30
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c9e:	8c c0       	rjmp	.+280    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     ca0:	90 58       	subi	r25, 0x80	; 128
     ca2:	92 30       	cpi	r25, 0x02	; 2
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <USB_Device_ProcessControlRequest+0x190>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ca6:	88 c0       	rjmp	.+272    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     ca8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
     cac:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <USB_ControlRequest+0x3>
     cb0:	8c 3d       	cpi	r24, 0xDC	; 220
     cb2:	53 e0       	ldi	r21, 0x03	; 3
     cb4:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     cb6:	99 f5       	brne	.+102    	; 0xd1e <USB_Device_ProcessControlRequest+0x206>
     cb8:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cbe:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cc0:	5f b7       	in	r21, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cc2:	f8 94       	cli
     cc4:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cc6:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     cc8:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cca:	3e e0       	ldi	r19, 0x0E	; 14
     ccc:	41 e2       	ldi	r20, 0x21	; 33
     cce:	e3 2f       	mov	r30, r19
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>

					if (SerialCharNum & 0x01)
     cd6:	84 91       	lpm	r24, Z
     cd8:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <USB_Device_ProcessControlRequest+0x1ca>
     cdc:	82 95       	swap	r24
						SigReadAddress++;
     cde:	8f 70       	andi	r24, 0x0F	; 15
					}

					SerialByte &= 0x0F;
     ce0:	3f 5f       	subi	r19, 0xFF	; 255

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     ce2:	8f 70       	andi	r24, 0x0F	; 15
     ce4:	8a 30       	cpi	r24, 0x0A	; 10
     ce6:	18 f0       	brcs	.+6      	; 0xcee <USB_Device_ProcessControlRequest+0x1d6>
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	c7 96       	adiw	r24, 0x37	; 55
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <USB_Device_ProcessControlRequest+0x1da>
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	c0 96       	adiw	r24, 0x30	; 48
     cf2:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cf4:	9d 93       	st	X+, r25
     cf6:	2f 5f       	subi	r18, 0xFF	; 255
     cf8:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     cfa:	49 f7       	brne	.-46     	; 0xcce <USB_Device_ProcessControlRequest+0x1b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cfc:	5f bf       	out	0x3f, r21	; 63
     cfe:	08 ee       	ldi	r16, 0xE8	; 232
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	f8 01       	movw	r30, r16
     d04:	80 81       	ld	r24, Z

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d06:	87 7f       	andi	r24, 0xF7	; 247
     d08:	80 83       	st	Z, r24
     d0a:	6a e2       	ldi	r22, 0x2A	; 42
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	c9 db       	rcall	.-2158   	; 0x4a6 <Endpoint_Write_Control_Stream_LE>
     d14:	f8 01       	movw	r30, r16
     d16:	80 81       	ld	r24, Z
     d18:	8b 77       	andi	r24, 0x7B	; 123
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d1a:	80 83       	st	Z, r24
     d1c:	4d c0       	rjmp	.+154    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     d1e:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <USB_ControlRequest+0x4>
     d22:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <USB_ControlRequest+0x5>
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	15 da       	rcall	.-3030   	; 0x158 <CALLBACK_USB_GetDescriptor>
     d2e:	bc 01       	movw	r22, r24
     d30:	89 2b       	or	r24, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d32:	09 f4       	brne	.+2      	; 0xd36 <USB_Device_ProcessControlRequest+0x21e>
     d34:	41 c0       	rjmp	.+130    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     d36:	08 ee       	ldi	r16, 0xE8	; 232
     d38:	10 e0       	ldi	r17, 0x00	; 0
     d3a:	f8 01       	movw	r30, r16
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d3c:	90 81       	ld	r25, Z
     d3e:	97 7f       	andi	r25, 0xF7	; 247
     d40:	90 83       	st	Z, r25
     d42:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	26 dc       	rcall	.-1972   	; 0x594 <Endpoint_Write_Control_PStream_LE>
     d48:	f8 01       	movw	r30, r16
     d4a:	80 81       	ld	r24, Z
     d4c:	8b 77       	andi	r24, 0x7B	; 123
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d4e:	80 83       	st	Z, r24
     d50:	33 c0       	rjmp	.+102    	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d52:	90 38       	cpi	r25, 0x80	; 128
     d54:	89 f5       	brne	.+98     	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     d56:	e8 ee       	ldi	r30, 0xE8	; 232
     d58:	f0 e0       	ldi	r31, 0x00	; 0

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d5a:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d5c:	87 7f       	andi	r24, 0xF7	; 247
     d5e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d60:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_Device_ConfigurationNumber>
     d64:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d68:	80 81       	ld	r24, Z
     d6a:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d6c:	80 83       	st	Z, r24
     d6e:	41 dd       	rcall	.-1406   	; 0x7f2 <Endpoint_ClearStatusStage>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d70:	23 c0       	rjmp	.+70     	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     d72:	91 11       	cpse	r25, r1
     d74:	21 c0       	rjmp	.+66     	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     d76:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
     d7a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <USB_ControlRequest+0x3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d7e:	99 27       	eor	r25, r25
     d80:	02 97       	sbiw	r24, 0x02	; 2
     d82:	d4 f4       	brge	.+52     	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     d84:	e8 ee       	ldi	r30, 0xE8	; 232
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	87 7f       	andi	r24, 0xF7	; 247
     d8c:	80 83       	st	Z, r24

	Endpoint_ClearStatusStage();
     d8e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <USB_ControlRequest+0x2>

	if (USB_Device_ConfigurationNumber)
     d92:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <USB_Device_ConfigurationNumber>
     d96:	2d dd       	rcall	.-1446   	; 0x7f2 <Endpoint_ClearStatusStage>
     d98:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_Device_ConfigurationNumber>
	  USB_DeviceState = DEVICE_STATE_Configured;
     d9c:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d9e:	19 f0       	breq	.+6      	; 0xda6 <USB_Device_ProcessControlRequest+0x28e>
     da0:	84 e0       	ldi	r24, 0x04	; 4
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     da2:	8e bb       	out	0x1e, r24	; 30
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <USB_Device_ProcessControlRequest+0x29e>
     da6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     daa:	88 23       	and	r24, r24
     dac:	14 f0       	brlt	.+4      	; 0xdb2 <USB_Device_ProcessControlRequest+0x29a>

	EVENT_USB_Device_ConfigurationChanged();
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <USB_Device_ProcessControlRequest+0x29c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     db2:	84 e0       	ldi	r24, 0x04	; 4
     db4:	8e bb       	out	0x1e, r24	; 30
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     db6:	45 d1       	rcall	.+650    	; 0x1042 <EVENT_USB_Device_ConfigurationChanged>
     db8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dbc:	83 ff       	sbrs	r24, 3
     dbe:	16 c0       	rjmp	.+44     	; 0xdec <USB_Device_ProcessControlRequest+0x2d4>
     dc0:	e8 ee       	ldi	r30, 0xE8	; 232
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     dc4:	80 81       	ld	r24, Z
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	80 83       	st	Z, r24
     dca:	eb ee       	ldi	r30, 0xEB	; 235
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     dce:	80 81       	ld	r24, Z
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     dd0:	80 62       	ori	r24, 0x20	; 32
     dd2:	80 83       	st	Z, r24
     dd4:	0b c0       	rjmp	.+22     	; 0xdec <USB_Device_ProcessControlRequest+0x2d4>
     dd6:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     dda:	91 30       	cpi	r25, 0x01	; 1
     ddc:	69 f7       	brne	.-38     	; 0xdb8 <USB_Device_ProcessControlRequest+0x2a0>
     dde:	02 cf       	rjmp	.-508    	; 0xbe4 <USB_Device_ProcessControlRequest+0xcc>
     de0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <USB_ControlRequest+0x2>
     de4:	88 23       	and	r24, r24
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     de6:	09 f4       	brne	.+2      	; 0xdea <USB_Device_ProcessControlRequest+0x2d2>
     de8:	04 cf       	rjmp	.-504    	; 0xbf2 <USB_Device_ProcessControlRequest+0xda>
     dea:	2f cf       	rjmp	.-418    	; 0xc4a <USB_Device_ProcessControlRequest+0x132>
     dec:	aa 96       	adiw	r28, 0x2a	; 42
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e02:	08 95       	ret

00000e04 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e04:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e06:	8e b3       	in	r24, 0x1e	; 30
     e08:	88 23       	and	r24, r24
     e0a:	99 f0       	breq	.+38     	; 0xe32 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e0c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     e10:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e12:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     e16:	98 2f       	mov	r25, r24
     e18:	91 70       	andi	r25, 0x01	; 1
     e1a:	80 fd       	sbrc	r24, 0
     e1c:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e1e:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e20:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
     e28:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e2a:	76 de       	rcall	.-788    	; 0xb18 <USB_Device_ProcessControlRequest>
     e2c:	cf 70       	andi	r28, 0x0F	; 15
     e2e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader fuses */
	MCUSR &= ~(1 << WDRF);
     e36:	84 b7       	in	r24, 0x34	; 52
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	a8 95       	wdr
     e42:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     e46:	88 61       	ori	r24, 0x18	; 24
     e48:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     e4c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     e50:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	80 e8       	ldi	r24, 0x80	; 128
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     e5e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     e62:	0f be       	out	0x3f, r0	; 63
/* Josua Arndt*/	
	/* Set Pin to Reset line of Main MCU as Input and tristate */
	/* will be used to to bring Main MCU to bootloader */
	
// allready setting output here will cause problems when jtag is used for programming so only set this when it is actually used
 	AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
     e64:	57 98       	cbi	0x0a, 7	; 10
	AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     e66:	5f 98       	cbi	0x0b, 7	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				LED_DDR  |= LEDS_ALL_LEDS;
     e68:	55 9a       	sbi	0x0a, 5	; 10
		
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     e6a:	5d 9a       	sbi	0x0b, 5	; 11
     e6c:	56 cd       	rjmp	.-1364   	; 0x91a <USB_Init>
     e6e:	08 95       	ret

00000e70 <main>:
     e70:	e2 df       	rcall	.-60     	; 0xe36 <SetupHardware>
     e72:	e8 e2       	ldi	r30, 0x28	; 40
     e74:	f2 e0       	ldi	r31, 0x02	; 2
     e76:	4f b7       	in	r20, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	88 ea       	ldi	r24, 0xA8	; 168
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
     e82:	93 83       	std	Z+3, r25	; 0x03
     e84:	82 83       	std	Z+2, r24	; 0x02
     e86:	95 83       	std	Z+5, r25	; 0x05
     e88:	84 83       	std	Z+4, r24	; 0x04
     e8a:	88 e2       	ldi	r24, 0x28	; 40
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	97 83       	std	Z+7, r25	; 0x07
     e90:	86 83       	std	Z+6, r24	; 0x06
     e92:	20 e8       	ldi	r18, 0x80	; 128
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	31 87       	std	Z+9, r19	; 0x09
     e98:	20 87       	std	Z+8, r18	; 0x08
     e9a:	13 86       	std	Z+11, r1	; 0x0b
     e9c:	12 86       	std	Z+10, r1	; 0x0a
     e9e:	4f bf       	out	0x3f, r20	; 63
     ea0:	ec e9       	ldi	r30, 0x9C	; 156
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	4f b7       	in	r20, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	8c e1       	ldi	r24, 0x1C	; 28
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	80 83       	st	Z, r24
     eb0:	93 83       	std	Z+3, r25	; 0x03
     eb2:	82 83       	std	Z+2, r24	; 0x02
     eb4:	95 83       	std	Z+5, r25	; 0x05
     eb6:	84 83       	std	Z+4, r24	; 0x04
     eb8:	8c e9       	ldi	r24, 0x9C	; 156
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	97 83       	std	Z+7, r25	; 0x07
     ebe:	86 83       	std	Z+6, r24	; 0x06
     ec0:	31 87       	std	Z+9, r19	; 0x09
     ec2:	20 87       	std	Z+8, r18	; 0x08
     ec4:	13 86       	std	Z+11, r1	; 0x0b
     ec6:	12 86       	std	Z+10, r1	; 0x0a
     ec8:	4f bf       	out	0x3f, r20	; 63
     eca:	5d 98       	cbi	0x0b, 5	; 11
     ecc:	78 94       	sei
     ece:	0f 2e       	mov	r0, r31
     ed0:	f8 e2       	ldi	r31, 0x28	; 40
     ed2:	ef 2e       	mov	r14, r31
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	ff 2e       	mov	r15, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	0c e9       	ldi	r16, 0x9C	; 156
     edc:	11 e0       	ldi	r17, 0x01	; 1
     ede:	0f 2e       	mov	r0, r31
     ee0:	f9 ee       	ldi	r31, 0xE9	; 233
     ee2:	af 2e       	mov	r10, r31
     ee4:	b1 2c       	mov	r11, r1
     ee6:	f0 2d       	mov	r31, r0
     ee8:	0f 2e       	mov	r0, r31
     eea:	f8 ee       	ldi	r31, 0xE8	; 232
     eec:	cf 2e       	mov	r12, r31
     eee:	d1 2c       	mov	r13, r1
     ef0:	f0 2d       	mov	r31, r0
     ef2:	0f 2e       	mov	r0, r31
     ef4:	ff e0       	ldi	r31, 0x0F	; 15
     ef6:	5f 2e       	mov	r5, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	61 2c       	mov	r6, r1
     efc:	c8 ec       	ldi	r28, 0xC8	; 200
     efe:	d0 e0       	ldi	r29, 0x00	; 0
     f00:	0f 2e       	mov	r0, r31
     f02:	fe ec       	ldi	r31, 0xCE	; 206
     f04:	8f 2e       	mov	r8, r31
     f06:	91 2c       	mov	r9, r1
     f08:	f0 2d       	mov	r31, r0
     f0a:	8f b7       	in	r24, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	d7 01       	movw	r26, r14
     f10:	1a 96       	adiw	r26, 0x0a	; 10
     f12:	2d 91       	ld	r18, X+
     f14:	3c 91       	ld	r19, X
     f16:	1b 97       	sbiw	r26, 0x0b	; 11
     f18:	8f bf       	out	0x3f, r24	; 63
     f1a:	f7 01       	movw	r30, r14
     f1c:	80 85       	ldd	r24, Z+8	; 0x08
     f1e:	91 85       	ldd	r25, Z+9	; 0x09
     f20:	28 17       	cp	r18, r24
     f22:	39 07       	cpc	r19, r25
     f24:	f9 f0       	breq	.+62     	; 0xf64 <main+0xf4>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	dd d9       	rcall	.-3142   	; 0x2e6 <CDC_Device_ReceiveByte>
     f2c:	99 23       	and	r25, r25
     f2e:	d4 f0       	brlt	.+52     	; 0xf64 <main+0xf4>
     f30:	f7 01       	movw	r30, r14
     f32:	a0 81       	ld	r26, Z
     f34:	b1 81       	ldd	r27, Z+1	; 0x01
     f36:	8c 93       	st	X, r24
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	26 81       	ldd	r18, Z+6	; 0x06
     f44:	37 81       	ldd	r19, Z+7	; 0x07
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	21 f4       	brne	.+8      	; 0xf54 <main+0xe4>
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	95 81       	ldd	r25, Z+5	; 0x05
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
     f54:	2f b7       	in	r18, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	82 85       	ldd	r24, Z+10	; 0x0a
     f5a:	93 85       	ldd	r25, Z+11	; 0x0b
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	93 87       	std	Z+11, r25	; 0x0b
     f60:	82 87       	std	Z+10, r24	; 0x0a
     f62:	2f bf       	out	0x3f, r18	; 63
     f64:	2f b7       	in	r18, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	d8 01       	movw	r26, r16
     f6a:	1a 96       	adiw	r26, 0x0a	; 10
     f6c:	8d 91       	ld	r24, X+
     f6e:	9c 91       	ld	r25, X
     f70:	1b 97       	sbiw	r26, 0x0b	; 11
     f72:	2f bf       	out	0x3f, r18	; 63
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	b1 f1       	breq	.+108    	; 0xfe4 <main+0x174>
     f78:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <VirtualSerial_CDC_Interface+0x1>
     f7c:	2f 70       	andi	r18, 0x0F	; 15
     f7e:	f5 01       	movw	r30, r10
     f80:	20 83       	st	Z, r18
     f82:	d6 01       	movw	r26, r12
     f84:	2c 91       	ld	r18, X
     f86:	20 ff       	sbrs	r18, 0
     f88:	2d c0       	rjmp	.+90     	; 0xfe4 <main+0x174>
     f8a:	80 31       	cpi	r24, 0x10	; 16
     f8c:	91 05       	cpc	r25, r1
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <main+0x122>
     f90:	85 2d       	mov	r24, r5
     f92:	88 23       	and	r24, r24
     f94:	39 f1       	breq	.+78     	; 0xfe4 <main+0x174>
     f96:	78 2e       	mov	r7, r24
     f98:	d8 01       	movw	r26, r16
     f9a:	12 96       	adiw	r26, 0x02	; 2
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	13 97       	sbiw	r26, 0x03	; 3
     fa2:	60 81       	ld	r22, Z
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	35 d9       	rcall	.-3478   	; 0x214 <CDC_Device_SendByte>
     faa:	81 11       	cpse	r24, r1
     fac:	1b c0       	rjmp	.+54     	; 0xfe4 <main+0x174>
     fae:	f8 01       	movw	r30, r16
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	93 83       	std	Z+3, r25	; 0x03
     fb8:	82 83       	std	Z+2, r24	; 0x02
     fba:	26 81       	ldd	r18, Z+6	; 0x06
     fbc:	37 81       	ldd	r19, Z+7	; 0x07
     fbe:	82 17       	cp	r24, r18
     fc0:	93 07       	cpc	r25, r19
     fc2:	21 f4       	brne	.+8      	; 0xfcc <main+0x15c>
     fc4:	84 81       	ldd	r24, Z+4	; 0x04
     fc6:	95 81       	ldd	r25, Z+5	; 0x05
     fc8:	93 83       	std	Z+3, r25	; 0x03
     fca:	82 83       	std	Z+2, r24	; 0x02
     fcc:	2f b7       	in	r18, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	82 85       	ldd	r24, Z+10	; 0x0a
     fd2:	93 85       	ldd	r25, Z+11	; 0x0b
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	93 87       	std	Z+11, r25	; 0x0b
     fd8:	82 87       	std	Z+10, r24	; 0x0a
     fda:	2f bf       	out	0x3f, r18	; 63
     fdc:	5d 9a       	sbi	0x0b, 5	; 11
     fde:	7a 94       	dec	r7
     fe0:	71 10       	cpse	r7, r1
     fe2:	da cf       	rjmp	.-76     	; 0xf98 <main+0x128>
     fe4:	88 81       	ld	r24, Y
     fe6:	85 ff       	sbrs	r24, 5
     fe8:	23 c0       	rjmp	.+70     	; 0x1030 <main+0x1c0>
     fea:	2f b7       	in	r18, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	f7 01       	movw	r30, r14
     ff0:	82 85       	ldd	r24, Z+10	; 0x0a
     ff2:	93 85       	ldd	r25, Z+11	; 0x0b
     ff4:	2f bf       	out	0x3f, r18	; 63
     ff6:	89 2b       	or	r24, r25
     ff8:	d9 f0       	breq	.+54     	; 0x1030 <main+0x1c0>
     ffa:	a2 81       	ldd	r26, Z+2	; 0x02
     ffc:	b3 81       	ldd	r27, Z+3	; 0x03
     ffe:	2d 91       	ld	r18, X+
    1000:	b3 83       	std	Z+3, r27	; 0x03
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	86 81       	ldd	r24, Z+6	; 0x06
    1006:	97 81       	ldd	r25, Z+7	; 0x07
    1008:	a8 17       	cp	r26, r24
    100a:	b9 07       	cpc	r27, r25
    100c:	21 f4       	brne	.+8      	; 0x1016 <main+0x1a6>
    100e:	84 81       	ldd	r24, Z+4	; 0x04
    1010:	95 81       	ldd	r25, Z+5	; 0x05
    1012:	93 83       	std	Z+3, r25	; 0x03
    1014:	82 83       	std	Z+2, r24	; 0x02
    1016:	3f b7       	in	r19, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	82 85       	ldd	r24, Z+10	; 0x0a
    101c:	93 85       	ldd	r25, Z+11	; 0x0b
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	93 87       	std	Z+11, r25	; 0x0b
    1022:	82 87       	std	Z+10, r24	; 0x0a
    1024:	3f bf       	out	0x3f, r19	; 63
    1026:	88 81       	ld	r24, Y
    1028:	85 ff       	sbrs	r24, 5
    102a:	fd cf       	rjmp	.-6      	; 0x1026 <main+0x1b6>
    102c:	d4 01       	movw	r26, r8
    102e:	2c 93       	st	X, r18
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	41 d9       	rcall	.-3454   	; 0x2b8 <CDC_Device_USBTask>
    1036:	e6 de       	rcall	.-564    	; 0xe04 <USB_USBTask>
    1038:	68 cf       	rjmp	.-304    	; 0xf0a <main+0x9a>

0000103a <EVENT_USB_Device_Connect>:
    103a:	5d 98       	cbi	0x0b, 5	; 11
    103c:	08 95       	ret

0000103e <EVENT_USB_Device_Disconnect>:
    103e:	5d 98       	cbi	0x0b, 5	; 11
    1040:	08 95       	ret

00001042 <EVENT_USB_Device_ConfigurationChanged>:
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	c4 d8       	rcall	.-3704   	; 0x1d0 <CDC_Device_ConfigureEndpoints>
    1048:	5d 98       	cbi	0x0b, 5	; 11
    104a:	08 95       	ret

0000104c <EVENT_USB_Device_ControlRequest>:
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	81 c9       	rjmp	.-3326   	; 0x354 <CDC_Device_ProcessControlRequest>
    1052:	08 95       	ret

00001054 <__vector_23>:
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
    1076:	5d 98       	cbi	0x0b, 5	; 11
    1078:	8e b3       	in	r24, 0x1e	; 30
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	29 f5       	brne	.+74     	; 0x10c8 <__vector_23+0x74>
    107e:	8f b7       	in	r24, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	ec e9       	ldi	r30, 0x9C	; 156
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	42 85       	ldd	r20, Z+10	; 0x0a
    1088:	53 85       	ldd	r21, Z+11	; 0x0b
    108a:	8f bf       	out	0x3f, r24	; 63
    108c:	20 85       	ldd	r18, Z+8	; 0x08
    108e:	31 85       	ldd	r19, Z+9	; 0x09
    1090:	42 17       	cp	r20, r18
    1092:	53 07       	cpc	r21, r19
    1094:	c9 f0       	breq	.+50     	; 0x10c8 <__vector_23+0x74>
    1096:	a0 81       	ld	r26, Z
    1098:	b1 81       	ldd	r27, Z+1	; 0x01
    109a:	9c 93       	st	X, r25
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	80 83       	st	Z, r24
    10a6:	26 81       	ldd	r18, Z+6	; 0x06
    10a8:	37 81       	ldd	r19, Z+7	; 0x07
    10aa:	82 17       	cp	r24, r18
    10ac:	93 07       	cpc	r25, r19
    10ae:	21 f4       	brne	.+8      	; 0x10b8 <__vector_23+0x64>
    10b0:	84 81       	ldd	r24, Z+4	; 0x04
    10b2:	95 81       	ldd	r25, Z+5	; 0x05
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
    10b8:	2f b7       	in	r18, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	82 85       	ldd	r24, Z+10	; 0x0a
    10be:	93 85       	ldd	r25, Z+11	; 0x0b
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	93 87       	std	Z+11, r25	; 0x0b
    10c4:	82 87       	std	Z+10, r24	; 0x0a
    10c6:	2f bf       	out	0x3f, r18	; 63
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <EVENT_CDC_Device_LineEncodingChanged>:
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	fc 01       	movw	r30, r24
    10f6:	81 8d       	ldd	r24, Z+25	; 0x19
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	19 f0       	breq	.+6      	; 0x1102 <EVENT_CDC_Device_LineEncodingChanged+0x1c>
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	19 f0       	breq	.+6      	; 0x1106 <EVENT_CDC_Device_LineEncodingChanged+0x20>
    1100:	04 c0       	rjmp	.+8      	; 0x110a <EVENT_CDC_Device_LineEncodingChanged+0x24>
    1102:	c0 e3       	ldi	r28, 0x30	; 48
    1104:	03 c0       	rjmp	.+6      	; 0x110c <EVENT_CDC_Device_LineEncodingChanged+0x26>
    1106:	c0 e2       	ldi	r28, 0x20	; 32
    1108:	01 c0       	rjmp	.+2      	; 0x110c <EVENT_CDC_Device_LineEncodingChanged+0x26>
    110a:	c0 e0       	ldi	r28, 0x00	; 0
    110c:	80 8d       	ldd	r24, Z+24	; 0x18
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	09 f4       	brne	.+2      	; 0x1114 <EVENT_CDC_Device_LineEncodingChanged+0x2e>
    1112:	c8 60       	ori	r28, 0x08	; 8
    1114:	82 8d       	ldd	r24, Z+26	; 0x1a
    1116:	87 30       	cpi	r24, 0x07	; 7
    1118:	31 f0       	breq	.+12     	; 0x1126 <EVENT_CDC_Device_LineEncodingChanged+0x40>
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	31 f0       	breq	.+12     	; 0x112a <EVENT_CDC_Device_LineEncodingChanged+0x44>
    111e:	86 30       	cpi	r24, 0x06	; 6
    1120:	29 f4       	brne	.+10     	; 0x112c <EVENT_CDC_Device_LineEncodingChanged+0x46>
    1122:	c2 60       	ori	r28, 0x02	; 2
    1124:	03 c0       	rjmp	.+6      	; 0x112c <EVENT_CDC_Device_LineEncodingChanged+0x46>
    1126:	c4 60       	ori	r28, 0x04	; 4
    1128:	01 c0       	rjmp	.+2      	; 0x112c <EVENT_CDC_Device_LineEncodingChanged+0x46>
    112a:	c6 60       	ori	r28, 0x06	; 6
    112c:	5b 9a       	sbi	0x0b, 3	; 11
    112e:	09 ec       	ldi	r16, 0xC9	; 201
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	d8 01       	movw	r26, r16
    1134:	1c 92       	st	X, r1
    1136:	0f 2e       	mov	r0, r31
    1138:	f8 ec       	ldi	r31, 0xC8	; 200
    113a:	ef 2e       	mov	r14, r31
    113c:	f1 2c       	mov	r15, r1
    113e:	f0 2d       	mov	r31, r0
    1140:	d7 01       	movw	r26, r14
    1142:	1c 92       	st	X, r1
    1144:	0f 2e       	mov	r0, r31
    1146:	fa ec       	ldi	r31, 0xCA	; 202
    1148:	cf 2e       	mov	r12, r31
    114a:	d1 2c       	mov	r13, r1
    114c:	f0 2d       	mov	r31, r0
    114e:	d6 01       	movw	r26, r12
    1150:	1c 92       	st	X, r1
    1152:	24 89       	ldd	r18, Z+20	; 0x14
    1154:	35 89       	ldd	r19, Z+21	; 0x15
    1156:	46 89       	ldd	r20, Z+22	; 0x16
    1158:	57 89       	ldd	r21, Z+23	; 0x17
    115a:	da 01       	movw	r26, r20
    115c:	c9 01       	movw	r24, r18
    115e:	b6 95       	lsr	r27
    1160:	a7 95       	ror	r26
    1162:	97 95       	ror	r25
    1164:	87 95       	ror	r24
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	60 58       	subi	r22, 0x80	; 128
    116c:	7b 47       	sbci	r23, 0x7B	; 123
    116e:	81 4e       	sbci	r24, 0xE1	; 225
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	21 d0       	rcall	.+66     	; 0x11b6 <__udivmodsi4>
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	31 09       	sbc	r19, r1
    1178:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
    117c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
    1180:	f6 01       	movw	r30, r12
    1182:	c0 83       	st	Z, r28
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	d7 01       	movw	r26, r14
    1188:	8c 93       	st	X, r24
    118a:	88 e9       	ldi	r24, 0x98	; 152
    118c:	f8 01       	movw	r30, r16
    118e:	80 83       	st	Z, r24
    1190:	5b 98       	cbi	0x0b, 3	; 11
    1192:	5f 98       	cbi	0x0b, 7	; 11
    1194:	87 ec       	ldi	r24, 0xC7	; 199
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <EVENT_CDC_Device_LineEncodingChanged+0xb2>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <EVENT_CDC_Device_LineEncodingChanged+0xb8>
    119e:	00 00       	nop
    11a0:	8b b1       	in	r24, 0x0b	; 11
    11a2:	80 58       	subi	r24, 0x80	; 128
    11a4:	8b b9       	out	0x0b, r24	; 11
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	08 95       	ret

000011b6 <__udivmodsi4>:
    11b6:	a1 e2       	ldi	r26, 0x21	; 33
    11b8:	1a 2e       	mov	r1, r26
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	fd 01       	movw	r30, r26
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <__udivmodsi4_ep>

000011c2 <__udivmodsi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	ee 1f       	adc	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	a2 17       	cp	r26, r18
    11cc:	b3 07       	cpc	r27, r19
    11ce:	e4 07       	cpc	r30, r20
    11d0:	f5 07       	cpc	r31, r21
    11d2:	20 f0       	brcs	.+8      	; 0x11dc <__udivmodsi4_ep>
    11d4:	a2 1b       	sub	r26, r18
    11d6:	b3 0b       	sbc	r27, r19
    11d8:	e4 0b       	sbc	r30, r20
    11da:	f5 0b       	sbc	r31, r21

000011dc <__udivmodsi4_ep>:
    11dc:	66 1f       	adc	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a 94       	dec	r1
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <__udivmodsi4_loop>
    11e8:	60 95       	com	r22
    11ea:	70 95       	com	r23
    11ec:	80 95       	com	r24
    11ee:	90 95       	com	r25
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	bd 01       	movw	r22, r26
    11f6:	cf 01       	movw	r24, r30
    11f8:	08 95       	ret

000011fa <_exit>:
    11fa:	f8 94       	cli

000011fc <__stop_program>:
    11fc:	ff cf       	rjmp	.-2      	; 0x11fc <__stop_program>
